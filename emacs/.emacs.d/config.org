#+TITLE: SAM's emacs config
#+AUTHOR: SAM
#+DESCRIPTION: SAM's personal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:2
#+PROPERTY: header-args:emacs-lisp :tangle config.el

* TABLE OF CONTENTS :toc:
- [[#important-programms-to-load-first][IMPORTANT PROGRAMMS TO LOAD FIRST]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#anzu][ANZU]]
- [[#backup][BACKUP]]
- [[#beacon][BEACON]]
- [[#centered-window-mode][CENTERED WINDOW MODE]]
- [[#company][COMPANY]]
- [[#buffer-move][BUFFER MOVE]]
- [[#disable-auto-save-files][DISABLE AUTO-SAVE FILES]]
- [[#diminish][DIMINISH]]
- [[#dashboard][DASHBOARD]]
- [[#djvu][DJVU]]
- [[#dired][DIRED]]
- [[#ediff][EDIFF]]
- [[#elfeed][ELFEED]]
- [[#emms][EMMS]]
- [[#evil][EVIL]]
- [[#flycheck][FLYCHECK]]
- [[#fix-backspace-going-up-and-down][Fix Backspace, going up and down]]
- [[#automated-bootstrap][AUTOMATED BOOTSTRAP]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#general-key-bindings][GENERAL KEY-BINDINGS]]
- [[#git-programs][GIT PROGRAMS]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][Magit]]
- [[#highlight-todo][HIGHLIGHT TODO]]
- [[#indent-bars][INDENT BARS]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#language-support][LANGUAGE SUPPORT]]
  - [[#lsp-mode-configuration-enhanced][LSP Mode Configuration (Enhanced)]]
  - [[#cc][C/C++]]
  - [[#python][Python]]
- [[#language-specific-run-commands][Language-Specific Run Commands]]
  - [[#c-programs-fixed][C Programs (Fixed)]]
  - [[#python-scripts][Python Scripts]]
  - [[#shell-scripts][Shell Scripts]]
  - [[#arm-assembly-linux-fixed][ARM Assembly (Linux Fixed)]]
  - [[#verilog-programs-enhanced][Verilog Programs (Enhanced)]]
  - [[#key-bindings][Key Bindings]]
  - [[#auto-mode-associations][Auto-Mode Associations]]
  - [[#lsp-ui-for-better-visuals-optional][LSP UI for Better Visuals (Optional)]]
- [[#mark-down-format][MARK-DOWN FORMAT]]
- [[#maximize-buffer][MAXIMIZE BUFFER]]
- [[#minibuffer-escape][MINIBUFFER ESCAPE]]
- [[#modeline][MODELINE]]
- [[#neotree][NEOTREE]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
- [[#pdf][PDF]]
- [[#package-sources][Package Sources]]
- [[#perspective][PERSPECTIVE]]
- [[#projectile][PROJECTILE]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#reload-emacs][RELOAD EMACS]]
- [[#sane-defaults][SANE-DEFAULTS]]
- [[#smartparens][SMARTPARENS]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
  - [[#vterm-multi][Vterm-Multi]]
- [[#sudo-edit][SUDO EDIT]]
- [[#tldr][TLDR]]
- [[#theme][THEME]]
- [[#transparency][TRANSPARENCY]]
- [[#verilog-mode-configuration][Verilog Mode Configuration]]
- [[#vundo][Vundo]]
- [[#which-key][WHICH-KEY]]

* IMPORTANT PROGRAMMS TO LOAD FIRST
** Elpaca Package Manager
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.8)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
			:ref nil
			:files (:defaults (:exclude "extensions"))
			:build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
 (build (expand-file-name "elpaca/" elpaca-builds-directory))
 (order (cdr elpaca-order))
 (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
	   ((zerop (call-process "git" nil buffer t "clone"
				 (plist-get order :repo) repo)))
	   ((zerop (call-process "git" nil buffer t "checkout"
				 (or (plist-get order :ref) "--"))))
	   (emacs (concat invocation-directory invocation-name))
	   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
				 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
	   ((require 'elpaca))
	   ((elpaca-generate-autoloads "elpaca" repo)))
      (kill-buffer buffer)
    (error "%s" (with-current-buffer buffer (buffer-string))))
((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)

;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
;;(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
;;(elpaca nil (message "deferred"))
#+end_src

* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* ANZU
#+begin_src emacs-lisp
(use-package anzu
  :ensure t
  :config
  (global-anzu-mode +1)
  ;; Remap default query-replace commands to use anzu versions
  (global-set-key [remap query-replace] 'anzu-query-replace)
  (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
  ;; Optional: Customize how anzu displays match information in the mode-line
  (setq anzu-mode-lighter "")
  (setq anzu-deactivate-region t)
  (setq anzu-search-threshold 1000))

(use-package evil-anzu
  :ensure t
  :after (evil anzu))
#+end_src


* BACKUP

By default, Emacs creates automatic backups of files in their original directories, such as "file.el" and the backup "file.el~". This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.

#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.emacs.d/Trash")))
(setq make-backup-files t)               ; Enable backups
(setq version-control t)                 ; Use version numbers for backups
(setq delete-old-versions t)             ; Automatically delete excess backups
(setq kept-new-versions 6)               ; Keep 6 newest versions
(setq kept-old-versions 2)               ; Keep 2 oldest versions
(setq backup-by-copying t)               ; Copy files instead of moving them
#+end_src


* BEACON

For scrolling large files and not loose the mouse cursor

#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1))
#+end_src

* CENTERED WINDOW MODE
This section configures centered-window-mode to center the active window in the frame.
#+begin_src emacs-lisp
(use-package centered-window
  :ensure t
  :bind (("C-c w c" . centered-window-mode-toggle)) ;; Bind "C-c w c" to toggle centered window mode
  :config
  (setq cwm-centered-window-width 140) ;; Adjust this value to your desired width
  (defun centered-window-mode-toggle ()
    "Toggle Centered Window Mode on and off."
    (interactive)
    (if centered-window-mode
        (centered-window-mode -1)
      (centered-window-mode +1))))
#+end_src



* COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
(use-package company
  :defer 2
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src


* BUFFER MOVE
Creating some functions to allow us to easily move windows (splits) around.  The following block of code was taken from buffer-move.el found on the EmacsWiki:
https://www.emacswiki.org/emacs/buffer-move.el

#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* DISABLE AUTO-SAVE FILES
#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil)
#+END_SRC

* DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
(use-package diminish)
#+end_src


* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "HAVE FUN!!!!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/.emacs.d/images/emacs-dash.png")  ;; use custom image as banner
  (setq org-agenda-files '("~/.emacs.d/org/inbox.org"))
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-vertically-center-content t)
  (setq dashboard-items '((recents . 5 )
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src


* DJVU
#+BEGIN_SRC emacs-lisp
;; DocView configuration (built-in)
(use-package doc-view
  :ensure nil  
  :mode ("\\.djvu\\'" . doc-view-mode)
  :config
  (setq doc-view-continuous t
        doc-view-resolution 300
        doc-view-cache-directory "~/.emacs.d/doc-view-cache/"))

;; DjVu specific configuration
(use-package djvu
  :ensure t  ;; Changed from :elpaca to :ensure
  :after doc-view
  :mode ("\\.djvu\\'" . djvu-read-mode)
  :config
  (setq imagemagick-types-inhibit '(C HTML HTM INFO M TXT PDF DJVU)))

#+END_SRC


* DIRED
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)

;;(add-hook 'peep-dired-hook 'evil-normalize-keymaps)

#+end_src

* EDIFF
‘ediff’ is a diff program that is built into Emacs.  By default, ‘ediff’ splits files vertically and places the ‘help’ frame in its own window.  I have changed this so the two files are split horizontally and the ‘help’ frame appears as a lower split within the existing window.  Also, I create my own ‘dt-ediff-hook’ where I add ‘j/k’ for moving to next/prev diffs.  By default, this is set to ‘n/p’.
#+begin_src emacs-lisp
(setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)

(defun dt-ediff-hook ()
  (ediff-setup-keymap)
  (define-key ediff-mode-map "j" 'ediff-next-difference)
  (define-key ediff-mode-map "k" 'ediff-previous-difference))

(add-hook 'ediff-mode-hook 'dt-ediff-hook)
#+end_src


* ELFEED
 Elfeed is used to read the rss from emacs and other sites. To stay in the emacs.
#+begin_src emacs-lisp
;; Ensure Elfeed is installed and configured
(use-package elfeed
  :ensure t
  :config
  ;; Set the database directory explicitly
  (setq elfeed-db-directory "~/.elfeed")

  ;; Function to display the Elfeed entry buffer in a split window at the bottom
  (defun elfeed-display-buffer (buf &optional _action)
    "Display Elfeed buffer BUF in a split window at the bottom."
    (let ((window (split-window-below))) ;; Split window at the bottom
      (set-window-buffer window buf)
      (select-window window)
      (set-window-text-height window (round (* 0.3 (frame-height)))))) ;; Set height to 30% of frame

  ;; Set the custom display function for Elfeed entries
  (setq elfeed-show-entry-switch #'elfeed-display-buffer))

;; Optional: Enhance Elfeed UI with elfeed-goodies
(use-package elfeed-goodies
  :ensure t
  :after elfeed
  :config
  (elfeed-goodies/setup))

;; Optional: Use an Org file to manage feeds with elfeed-org
(use-package elfeed-org
  :ensure t
  :after elfeed
  :config
  ;; Specify the Org file containing your feed configuration
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
  ;; Initialize elfeed-org to process the Org file
  (elfeed-org))

;; Add emacs-reddigg for Reddit browsing in Org-mode
(use-package reddigg
  :ensure t
  :config
  ;; List of subreddits to show in *reddigg-main* buffer.
  ;; Add your favorite subreddits here.
  (setq reddigg-subs '("emacs" "linux" "programming" "technology"))

  ;; Disable confirmation for executing links in org-mode buffers.
  ;; Use this if you trust the links and want smoother navigation.
  (setq org-confirm-elisp-link-function nil)

  ;; Function to open Reddit's main subreddit list in *reddigg-main* buffer.
  (defun my-reddigg-view-main ()
    "Open the main Reddit subreddit list."
    (interactive)
    (reddigg-view-main)))

;; Function to integrate reddigg into your workflow with Elfeed
(defun my-open-reddit-in-reddigg ()
  "Open a Reddit post from Elfeed in reddigg."
  (interactive)
  (let ((entry-link (elfeed-entry-link elfeed-show-entry)))
    (if (and entry-link (string-match "reddit.com" entry-link))
        ;; Open Reddit comments or posts directly in reddigg-comments buffer.
        (reddigg-view-comments entry-link)
      (message "This is not a Reddit post!"))))

#+end_src


* EMMS 
  To set up EMMS, we will configure it to use VLC as the media player.
  
  #+begin_src emacs-lisp
  (use-package emms
    :ensure t
    :config
    (require 'emms-setup)
    (emms-all)
    (setq emms-player-list '(emms-player-vlc)
          emms-info-functions '(emms-info-native)))
  #+end_src


* EVIL 
[[https://github.com/emacs-evil/evil][Evil]] is an extensible vi/vim layer for Emacs.  Because...let's face it.  The Vim keybindings are just plain better.

#+begin_src emacs-lisp
:ensure t
;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
    (evil-mode))

(use-package evil-collection
  :after evil
  :config
  ;; Do not uncomment this unless you want to specify each and every mode
  ;; that evil-collection should works with.  The following line is here 
  ;; for documentation purposes in case you need it.  
  ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))

(use-package evil-tutor)

;; Using RETURN to follow links in Org/Evil 
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)

#+end_src




* FLYCHECK
Install =luacheck= from your Linux distro's repositories for flycheck to work correctly with lua files.  Install =python-pylint= for flycheck to work with python files.  Haskell works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc= is installed.  For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :init (global-flycheck-mode))

#+end_src

* Fix Backspace, going up and down
#+begin_src emacs-lisp
;; Backspace handling
;; (global-set-key (kbd "DEL") 'backward-delete-char)
;; (global-set-key (kbd "<backspace>") 'backward-delete-char)

;; ;; Use normal-erase-is-backspace-mode to handle backspace correctly
;; (normal-erase-is-backspace-mode 1)

;; Ensure C-h behaves as backspace in all contexts
(keyboard-translate ?\C-h ?\C-?)

;; Ctrl+d and Ctrl+u for scrolling
(global-set-key (kbd "C-d") 'scroll-up-command)
(global-set-key (kbd "C-u") 'scroll-down-command)

;; ;; Custom function to delete backward even if text is read-only
;; (defun my-backward-delete-char ()
;;   "Delete backward character, ignoring read-only status in minibuffer."
;;   (interactive)
;;   (let ((inhibit-read-only t))
;;     (call-interactively 'backward-delete-char)))

;; ;; Bind this function to the backspace key in the minibuffer
;; (define-key minibuffer-local-map (kbd "DEL") 'my-backward-delete-char)
;; (define-key minibuffer-local-map (kbd "<backspace>") 'my-backward-delete-char)
#+end_src

* AUTOMATED BOOTSTRAP
Automatic installation of system dependencies and fonts.

#+begin_src emacs-lisp
;; System dependencies and fonts map
(defvar system-dependencies
  '((fedora . ("git" "emacs" "ripgrep" "fd-find" "ubuntu-family-fonts" "jetbrains-mono-fonts"))
    (debian . ("git" "emacs" "ripgrep" "fd-find" "fonts-ubuntu" "fonts-jetbrains-mono")) 
    (arch   . ("git" "emacs" "ripgrep" "fd" "ttf-ubuntu-font-family" "ttf-jetbrains-mono"))
    (macos  . ("git" "emacs" "ripgrep" "fd" "font-ubuntu" "font-jetbrains-mono")))
  "System dependencies per distribution.")

;; Bootstrap function (runs once)
(defun bootstrap-system-dependencies ()
  "Bootstrap system dependencies and fonts."
  (interactive)
  (let ((bootstrap-file (expand-file-name "bootstrap-complete" user-emacs-directory)))
    (unless (file-exists-p bootstrap-file)
      (message "Running first-time system bootstrap...")
      
      ;; Install system packages based on detected distribution
      (let* ((pm (detect-package-manager))
             (distro (pcase pm
                      ("dnf" 'fedora)
                      ("apt" 'debian) 
                      ("pacman" 'arch)
                      ("brew" 'macos)))
             (packages (cdr (assoc distro system-dependencies))))
        
        (when packages
          (message "Installing packages for %s..." distro)
          (dolist (pkg packages)
            (let ((install-cmd
                   (pcase pm
                     ("dnf" `("sudo" "dnf" "install" "-y" ,pkg))
                     ("apt" `("sudo" "apt" "install" "-y" ,pkg))
                     ("pacman" `("sudo" "pacman" "-S" "--noconfirm" ,pkg))
                     ("brew" `("brew" "install" ,(if (string-prefix-p "font-" pkg) "--cask" "") ,pkg)))))
              (when install-cmd
                (message "Installing %s..." pkg)
                (apply #'call-process (car install-cmd) nil nil nil (cdr install-cmd))))))
        
        ;; Refresh font cache
        (call-process "fc-cache" nil nil nil "-fv")
        
        ;; Create completion marker
        (with-temp-file bootstrap-file
          (insert "Bootstrap completed on: " (current-time-string)))
        
        (message "System bootstrap completed!")))))

;; Run bootstrap on startup (only once)
(add-hook 'after-init-hook #'bootstrap-system-dependencies)
#+end_src


* FONTS
Defining the various fonts that Emacs will use.
** Setting the Font Face
#+begin_src emacs-lisp
;; Font availability checker
(defun font-available-p (font-name)
  "Check if FONT-NAME is available on the system."
  (when (display-graphic-p)
    (find-font (font-spec :name font-name))))

;; System package manager detection
(defun detect-package-manager ()
  "Detect system package manager."
  (cond
   ((executable-find "dnf") "dnf")
   ((executable-find "apt") "apt") 
   ((executable-find "pacman") "pacman")
   ((executable-find "brew") "brew")
   (t nil)))

;; Automatic font installation
(defun install-font-package (font-name package-name)
  "Install missing font package automatically."
  (let ((pm (detect-package-manager)))
    (when pm
      (message "Installing font: %s" font-name)
      (let ((install-cmd
             (pcase pm
               ("dnf" `("sudo" "dnf" "install" "-y" ,package-name))
               ("apt" `("sudo" "apt" "install" "-y" 
                       ,(pcase package-name
                          ("ubuntu-family-fonts" "fonts-ubuntu")
                          ("liberation-fonts" "fonts-liberation") 
                          ("jetbrains-mono-fonts" "fonts-jetbrains-mono")
                          (_ package-name))))
               ("pacman" `("sudo" "pacman" "-S" "--noconfirm"
                          ,(pcase package-name
                             ("ubuntu-family-fonts" "ttf-ubuntu-font-family")
                             ("liberation-fonts" "ttf-liberation")
                             ("jetbrains-mono-fonts" "ttf-jetbrains-mono")
                             (_ package-name))))
               ("brew" `("brew" "install" "--cask"
                        ,(pcase package-name
                           ("ubuntu-family-fonts" "font-ubuntu")
                           ("liberation-fonts" "font-liberation")
                           ("jetbrains-mono-fonts" "font-jetbrains-mono")
                           (_ package-name)))))))
        (when install-cmd
          (apply #'call-process (car install-cmd) nil nil nil (cdr install-cmd))
          (call-process "fc-cache" nil nil nil "-fv"))))))

;; Safe font configuration with auto-installation
(defun safe-set-font (face font-list &rest args)
  "Safely set font with automatic installation fallback."
  (when (display-graphic-p)
    (let ((available-font (seq-find #'font-available-p font-list)))
      (if available-font
          (apply #'set-face-attribute face nil :font available-font args)
        (progn
          (message "No fonts available from: %s" font-list)
          ;; Auto-install first missing font
          (let ((font-packages '(("Ubuntu" . "ubuntu-family-fonts")
                                ("JetBrains Mono" . "jetbrains-mono-fonts")
                                ("Liberation Sans" . "liberation-fonts"))))
            (dolist (font-name font-list)
              (let ((package-name (cdr (assoc font-name font-packages))))
                (when package-name
                  (install-font-package font-name package-name)))))
          ;; Retry after installation
          (let ((retry-font (seq-find #'font-available-p font-list)))
            (when retry-font
              (apply #'set-face-attribute face nil :font retry-font args))))))))

;; Configure fonts with automatic installation fallback
(safe-set-font 'default 
               '("JetBrains Mono" "Liberation Mono" "DejaVu Sans Mono" "monospace")
               :height 110 :weight 'medium)

(safe-set-font 'variable-pitch 
               '("Ubuntu" "Liberation Sans" "DejaVu Sans" "sans-serif")
               :height 120 :weight 'medium)

(safe-set-font 'fixed-pitch 
               '("JetBrains Mono" "Liberation Mono" "DejaVu Sans Mono" "monospace")
               :height 110 :weight 'medium)

;; Makes commented text and keywords italics.
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

;; Line spacing
(setq-default line-spacing 0.12)
#+end_src


** Zooming In/Out
You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src



* GENERAL KEY-BINDINGS
#+begin_src emacs-lisp

(use-package general
  :ensure t
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer sam/leader-keys
    :states '(normal visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode

(sam/leader-keys
 ;; Bind SPC x to M-x (execute-extended-command)
  "SPC" '(execute-extended-command :wk "M-x")
  "." '(find-file :wk "Find file")
  "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
  "TAB TAB" '(comment-line :wk "Comment lines")
  ;; Comment/Uncomment bindings
  "c" '(:ignore t :wk "Comments")
  "cc" '(comment-region :wk "Comment region")
  "cu" '(uncomment-region :wk "Uncomment region")
  "cl" '(comment-line :wk "Comment line")

  ;; Centered Window Mode bindings
  "c" '(:ignore t :wk "Centered Window") ;; Reuse 'c' for Centered Window context
  "co" '(centered-window-mode :wk "Toggle Centered Window Mode") ;; Toggle on/off
  "cw" '(lambda () (interactive) (centered-window-mode -1) :wk "Close Centered Window Mode")) ;; Explicitly close

  (sam/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

  (sam/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired"))

 (sam/leader-keys
   "e" '(:ignore t :wk "Evaluate/Eshell")    
   "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
   "e d" '(eval-defun :wk "Evaluate defun containing or after point")
   "e e" '(eval-expression :wk "Evaluate and elisp expression")
   "e f" '(ediff-files :wk "Run ediff on a pair of files")
   "e F" '(ediff-files3 :wk "Run ediff on three files")
   "e h" '(counsel-esh-history :which-key "Eshell history")
   "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
   "e r" '(eval-region :wk "Evaluate elisp in region")
   "e s" '(eshell :which-key "Eshell"))

   (sam/leader-keys
    "f" '(:ignore t :wk "Files")    
    "f c" '((lambda () (interactive)
              (find-file "~/.emacs.d/config.org")) 
            :wk "Open emacs config.org")
    "f e" '((lambda () (interactive)
              (dired "~/.emacs.d/")) 
            :wk "Open user-emacs-directory in dired")
    "f d" '(find-grep-dired :wk "Search for string in files in DIR")
    "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
    "f i" '((lambda () (interactive)
              (find-file "~/.emacs.d/init.el")) 
            :wk "Open emacs init.el")
    "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
    "f l" '(counsel-locate :wk "Locate a file")
    "f r" '(counsel-recentf :wk "Find recent files")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file")
   
  ;; Add Elfeed commands under the leader key
    "f" '(:ignore t :wk "Elfeed") ;; Create a top-level group for Elfeed
    "f r" '(elfeed-update :wk "Refresh Elfeed") ;; Refresh feeds
    "f s" '(elfeed-search-live-filter :wk "Search feeds") ;; Search feeds
    "f o" '(elfeed :wk "Open Elfeed")) ;; Open the Elfeed interface
   
  (sam/leader-keys
    "g" '(:ignore t :wk "Git")    
    "g /" '(magit-displatch :wk "Magit dispatch")
    "g ." '(magit-file-displatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create") 
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find") 
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-file :wk "Git unstage file"))

   (sam/leader-keys
    "h" '(:ignore t :wk "Help")
    "h a" '(counsel-apropos :wk "Apropos")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty")
    "h e" '(view-echo-area-messages :wk "View echo area messages")
    "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h i" '(info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
                (load-file "~/.emacs.d/init.el")
                (ignore (elpaca-process-queues)))
              :wk "Reload emacs config")
    "h t" '(load-theme :wk "Load theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))

  (sam/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t e" '(eshell-toggle :wk "Toggle eshell")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
    "t o" '(org-mode :wk "Toggle org mode")
    "t r" '(rainbow-mode :wk "Toggle rainbow mode")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm"))

  ;; Multi-vterm keybindings
  (sam/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t M" '(multi-vterm :wk "New vterm")
    "t j" '(multi-vterm-next :wk "Next vterm")
    "t k" '(multi-vterm-prev :wk "Previous vterm")
    "t d" '(multi-vterm-dedicated-toggle :wk "Dedicated vterm")
    "t p" '(multi-vterm-project :wk "Project vterm"))

  (sam/leader-keys
  "m" '(:ignore t :wk "Org")
  "m a" '(org-agenda :wk "Org agenda")
  "m e" '(org-export-dispatch :wk "Org export dispatch")
  "m i" '(org-toggle-item :wk "Org toggle item")
  "m t" '(org-todo :wk "Org todo")
  "m B" '(org-babel-tangle :wk "Org babel tangle")
  "m T" '(org-todo-list :wk "Org todo list")
  "m m" '(toggle-maximize-buffer :wk "Toggle maximize buffer"))

(sam/leader-keys
  "m b" '(:ignore t :wk "Tables")
  "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

(sam/leader-keys
  "m d" '(:ignore t :wk "Date/deadline")
  "m d t" '(org-time-stamp :wk "Org time stamp"))

  (sam/leader-keys
    "o" '(:ignore t :wk "Open")
    "o d" '(dashboard-open :wk "Dashboard")
    "o f" '(make-frame :wk "Open buffer in new frame")
    "o F" '(select-frame-by-name :wk "Select frame by name"))

(sam/leader-keys
  "p" '(projectile-command-map :wk "Projectile"))

  (sam/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(dictionary-search :wk "Search dictionary")
    "s m" '(man :wk "Man pages")
    "s t" '(tldr :wk "Lookup TLDR docs for a command")
    "s w" '(woman :wk "Similar to man but doesn't require man"))


(sam/leader-keys
  "w" '(:ignore t :wk "Windows")
  ;; Window splits
  "w c" '(evil-window-delete :wk "Close window")
  "w n" '(evil-window-new :wk "New window")
  "w s" '(evil-window-split :wk "Horizontal split window")
  "w v" '(evil-window-vsplit :wk "Vertical split window")
  ;; Window motions
  "w h" '(evil-window-left :wk "Window left")
  "w j" '(evil-window-down :wk "Window down")
  "w k" '(evil-window-up :wk "Window up")
  "w l" '(evil-window-right :wk "Window right")
  "w w" '(evil-window-next :wk "Goto next window")
  ;; Move Windows
  "w H" '(buf-move-left :wk "Buffer move left")
  "w J" '(buf-move-down :wk "Buffer move down")
  "w K" '(buf-move-up :wk "Buffer move up")
  "w L" '(buf-move-right :wk "Buffer move right")
  ;; Words
   "w d" '(downcase-word :wk "Downcase word")
   "w u" '(upcase-word :wk "Upcase word")
   "w =" '(count-words :wk "Count words/lines for buffer"))
)
#+end_src


* GIT PROGRAMS

** Git Time Machine
[[https://github.com/emacsmirror/git-timemachine][git-timemachine]] is a program that allows you to move backwards and forwards through a file's commits. 'SPC g t' will open the time machine on a file if it is in a git repo. Then, while in normal mode, you can use 'CTRL-j' and 'CTRL-k' to move backwards and forwards through the commits.

#+begin_src emacs-lisp
;;(use-package git-timemachine
;;  :elpaca nil
;;  :load-path "~/.emacs.d/elpaca/builds/git-timemachine")
(use-package git-timemachine
  :ensure t)
(use-package transient
  :ensure t)
#+end_src

** Magit
#+begin_src emacs-lisp
;;(use-package magit
;;  :elpaca nil
;;  :load-path "~/.emacs.d/elpaca/builds/magit/lisp")
(use-package magit
  :ensure t)
#+end_src



* HIGHLIGHT TODO
Adding highlights to TODO and related words.

#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))

#+end_src

* INDENT BARS
#+begin_src emacs-lisp
(use-package indent-bars
  :ensure t
  :hook (prog-mode . indent-bars-mode))
#+end_src


* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))
  
  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))

#+end_src

* LANGUAGE SUPPORT
** LSP Mode Configuration (Enhanced)
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :init
  (setq lsp-keymap-prefix "C-c l")
  :commands (lsp lsp-deferred)
  :config
  (setq lsp-prefer-flymake nil
        lsp-enable-snippet t
        lsp-auto-guess-root t))

(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-sideline-ignore-duplicate t
        lsp-ui-doc-enable t
        lsp-ui-peek-enable t))
#+end_src

** C/C++
#+begin_src emacs-lisp
(use-package cc-mode
  :elpaca nil
  :config
  (add-hook 'c-mode-hook #'lsp-deferred)
  (add-hook 'c++-mode-hook #'lsp-deferred))
#+end_src

** Python
#+begin_src emacs-lisp
(use-package python-mode
  :ensure t
  :hook (python-mode . lsp-deferred))
#+end_src

* Language-Specific Run Commands
** C Programs (Fixed)
#+begin_src emacs-lisp
(defun compile-and-run-c ()
  (interactive)
  (let* ((file (file-name-nondirectory buffer-file-name))
         (base (file-name-sans-extension file))
         (compile-command (format "gcc -Wall %s -o %s && ./%s" file base base)))
    (save-buffer)
    (compile compile-command t)))
#+end_src

** Python Scripts
#+begin_src emacs-lisp
(defun run-python-script ()
  (interactive)
  (save-buffer)
  (let ((file (file-name-nondirectory buffer-file-name)))
    (compile (format "python3 %s" file))
    (switch-to-buffer-other-window "*compilation*")))
#+end_src

** Shell Scripts
#+begin_src emacs-lisp
(defun run-shell-script ()
  (interactive)
  (save-buffer)
  (let ((file (file-name-nondirectory buffer-file-name)))
    (compile (format "bash %s" file))
    (switch-to-buffer-other-window "*compilation*")))
#+end_src

** ARM Assembly (Linux Fixed)
#+begin_src emacs-lisp
(defun compile-and-run-arm-assembly ()
  (interactive)
  (save-buffer)
  (let* ((file (file-name-nondirectory buffer-file-name))
         (base (file-name-sans-extension file))
         ;; Linux ARM64 assembly compilation
         (compile-command (format "as --64 -o %s.o %s && ld -o %s %s.o && ./%s"
                                  base file base base base)))
    (when (file-exists-p base)
      (delete-file base))
    (compile compile-command)
    (switch-to-buffer-other-window "*compilation*")))
#+end_src

** Verilog Programs (Enhanced)
#+begin_src emacs-lisp
(defun compile-and-run-verilog ()
  (interactive)
  (save-buffer)
  (let* ((file (file-name-nondirectory buffer-file-name))
         (base (file-name-sans-extension file))
         (module-file (if (string-match-p "_tb\.v$" file)
                          (concat (file-name-sans-extension
                                   (replace-regexp-in-string "_tb" "" file))
                                  ".v")
                        file))
         (tb-file (if (string-match-p "_tb\.v$" file)
                      file
                    (concat base "_tb.v")))
         (compile-command (format "iverilog -o %s %s %s && vvp %s -fst"
                                  base module-file tb-file base)))
    (compile compile-command)
    (switch-to-buffer-other-window "*compilation*")
    (run-with-timer
     3 nil
     (lambda ()
       (let ((fst-file (concat base ".fst"))
             (vcd-file (concat base ".vcd")))
         (when (or (file-exists-p fst-file) (file-exists-p vcd-file))
           (start-process "gtkwave" nil "gtkwave" 
                         (if (file-exists-p fst-file) fst-file vcd-file))))))))
#+end_src

** Key Bindings
#+begin_src emacs-lisp
;; F5 key bindings for different modes
(add-hook 'c-mode-hook
          (lambda () (local-set-key [f5] 'compile-and-run-c)))
(add-hook 'python-mode-hook
          (lambda () (local-set-key [f5] 'run-python-script)))
(add-hook 'sh-mode-hook
          (lambda () (local-set-key [f5] 'run-shell-script)))
(add-hook 'verilog-mode-hook
          (lambda () (local-set-key [f5] 'compile-and-run-verilog)))
(add-hook 'asm-mode-hook
          (lambda () (local-set-key [f5] 'compile-and-run-arm-assembly)))
#+end_src

** Auto-Mode Associations
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\.c\'" . c-mode))
(add-to-list 'auto-mode-alist '("\.py\'" . python-mode))
(add-to-list 'auto-mode-alist '("\.sh\'" . sh-mode))
(add-to-list 'auto-mode-alist '("\.v\'" . verilog-mode))
(add-to-list 'auto-mode-alist '("\.sv\'" . verilog-mode))
(add-to-list 'auto-mode-alist '("\.asm\'" . asm-mode))
#+end_src

** LSP UI for Better Visuals (Optional)
#+begin_src emacs-lisp
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)
#+end_src


* MARK-DOWN FORMAT
#+BEGIN_SRC emacs-lisp
;; Markdown Mode Configuration
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "/opt/homebrew/bin/multimarkdown"))

;; Optional: Add live preview functionality
(use-package markdown-preview-mode
  :ensure t)

;; Optional: Enable markdown-preview-mode automatically for markdown files
(add-hook 'markdown-mode-hook 'markdown-preview-mode)
#+END_SRC

* MAXIMIZE BUFFER
Idea is to maximize a buffer when needed. 

#+BEGIN_SRC emacs-lisp
(use-package winner
  :elpaca nil	;; do not install from external repo
  :config
  (winner-mode 1))

(defun toggle-maximize-buffer ()
  "Toggle between maximizing the current buffer and restoring the previous window configuration."
  (interactive)
  (if (= 1 (length (window-list)))
      (jump-to-register '_)
    (progn
      (set-register '_ (list (current-window-configuration)))
      (delete-other-windows))))
#+END_SRC


* MINIBUFFER ESCAPE
By default, Emacs requires you to hit ESC three times to escape quit the minibuffer.  

#+begin_src emacs-lisp
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 35      ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name
#+end_src



* NEOTREE
Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  NeoTree provides following themes: classic, ascii, arrow, icons, and nerd.  Theme can be configed by setting "two" themes for neo-theme: one for the GUI and one for the terminal.  I like to use 'SPC t' for 'toggle' keybindings, so I have used 'SPC t n' for toggle-neotree.

| COMMAND        | DESCRIPTION               | KEYBINDING |
|----------------+---------------------------+------------|
| neotree-toggle | /Toggle neotree/            | SPC t n    |
| neotree- dir   | /Open directory in neotree/ | SPC d n    |

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 55
        neo-window-fixed-size nil
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action) 
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))

;; show hidden files
#+end_src


* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src


** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent
Org mode source blocks have some really weird and annoying default indentation behavior.  I think this has to do with electric-indent-mode, which is turned on by default in Emacs.  So let's turn it OFF!

#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |


#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src


* PDF
[[https://github.com/vedang/pdf-tools][pdf-tools]] is a replacement of DocView for viewing PDF files inside Emacs.  It uses the =poppler= library, which also means that 'pdf-tools' can by used to modify PDFs.  I use to disable 'display-line-numbers-mode' in 'pdf-view-mode' because line numbers crash it.

#+begin_src emacs-lisp
;; (setenv "PKG_CONFIG" "/opt/homebrew/bin/pkg-config")
;; (use-package pdf-tools
;;   :ensure t
;;   :defer t
;;   :commands (pdf-loader-install)
;;   :mode "\\.pdf\\'"
;;   :bind (:map pdf-view-mode-map
;;               ("j" . pdf-view-next-line-or-next-page)
;;               ("k" . pdf-view-previous-line-or-previous-page)
;;               ("C-=" . pdf-view-enlarge)
;;               ("C--" . pdf-view-shrink))
;;   :init (pdf-loader-install)
;;   :config (add-to-list 'revert-without-query ".pdf"))

;; ;; Set midnight colors for dark mode
;; (setq pdf-view-midnight-colors '("#ffffff" . "#000000"))

;; ;; Automatically enable midnight mode for PDFs
;; (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)


;; (add-hook 'pdf-view-mode-hook #'(lambda () (interactive) (display-line-numbers-mode -1)
;;                                                          (blink-cursor-mode -1)
;;                                                          (doom-modeline-mode -1)))
;;(setenv "PKG_CONFIG" "/opt/homebrew/bin/pkg-config")
(use-package pdf-tools
  :ensure t
  :defer t
  :mode "\\.pdf\\'"
  :bind (:map pdf-view-mode-map
              ("j" . pdf-view-next-line-or-next-page)
              ("k" . pdf-view-previous-line-or-previous-page)
              ("C-=" . pdf-view-enlarge)
              ("C--" . pdf-view-shrink)
              ("C-c t" . my/pdf-view-toggle-theme))
  :init
  (pdf-loader-install)
  :config
  (add-to-list 'revert-without-query ".pdf")

  ;; Define color schemes
  (defvar my/pdf-dark-colors '("#ffffff" . "#000000")   ; white text on black
    "PDF Tools midnight mode colors for dark theme.")
  (defvar my/pdf-light-colors '("#000000" . "#ffffff")  ; black text on white
    "PDF Tools midnight mode colors for light theme.")

  ;; Track current theme
  (defvar my/pdf-current-theme 'light
    "Current PDF theme: 'dark or 'light.")

  ;; Toggle function
  (defun my/pdf-view-toggle-theme ()
    "Toggle between light and dark themes in pdf-view-mode."
    (interactive)
    (if (eq my/pdf-current-theme 'dark)
        (progn
          (setq pdf-view-midnight-colors my/pdf-light-colors)
          (setq my/pdf-current-theme 'light))
      (setq pdf-view-midnight-colors my/pdf-dark-colors)
      (setq my/pdf-current-theme 'dark))
    (pdf-view-midnight-minor-mode 1)
    (pdf-view-redisplay))

  ;; Set initial theme
  (defun my/pdf-view-set-initial-theme ()
    (setq pdf-view-midnight-colors
          (if (eq my/pdf-current-theme 'dark)
              my/pdf-dark-colors
            my/pdf-light-colors))
    (pdf-view-midnight-minor-mode 1))

  (add-hook 'pdf-view-mode-hook #'my/pdf-view-set-initial-theme)
  (add-hook 'pdf-view-mode-hook (lambda ()
                                  (display-line-numbers-mode -1)
                                  (blink-cursor-mode -1)
                                  (doom-modeline-mode -1))))

#+end_src


* Package Sources
#+begin_src emacs-lisp
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                        ("gnu" . "https://elpa.gnu.org/packages/")
                        ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

(setq elpaca-recipe-sources '(elpaca-melpa-recipes
                             elpaca-gnu-elpa-recipes
                             elpaca-nongnu-elpa-recipes))

(add-to-list 'exec-path "/opt/homebrew/bin")
(setq-default with-editor-emacsclient-executable "/opt/homebrew/bin/emacsclient")
#+end_src

* PERSPECTIVE
[[https://github.com/nex3/perspective-el][Perspective]] provides multiple named workspaces (or "perspectives") in Emacs, similar to multiple desktops in window managers.  Each perspective has its own buffer list and its own window layout, along with some other isolated niceties, like the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]] ring.

#+begin_src emacs-lisp
(use-package perspective
  :custom
  ;; NOTE! I have also set 'SCP =' to open the perspective menu.
  ;; I'm only setting the additional binding because setting it
  ;; helps suppress an annoying warning message.
  (persp-mode-prefix-key (kbd "C-c M-p"))
  :init 
  (persp-mode)
  :config
  ;; Sets a file to write to when we save states
  (setq persp-state-default-file "~/.config/emacs/sessions"))

;; This will group buffers by persp-name in ibuffer.
(add-hook 'ibuffer-hook
          (lambda ()
            (persp-ibuffer-set-filter-groups)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
              (ibuffer-do-sort-by-alphabetic))))

;; Automatically save perspective states to file when Emacs exits.
(add-hook 'kill-emacs-hook #'persp-state-save)

#+end_src

* PROJECTILE
[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.  It should be noted that many projectile commands do not work if you have set "fish" as the "shell-file-name" for Emacs.  I had initially set "fish" as the "shell-file-name" in the Vterm section of this config, but oddly enough I changed it to "bin/sh" and projectile now works as expected, and Vterm still uses "fish" because my default user "sh" on my Linux system is "fish".

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1))
#+end_src

* RAINBOW DELIMITERS
Adding rainbow coloring to parentheses.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))

#+end_src

* RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.  

#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook 
  ((org-mode prog-mode) . rainbow-mode))
#+end_src

* RELOAD EMACS
This is just an example of how to create a simple function in Emacs.  Use this function to reload Emacs after adding changes to the config.  Yes, I am loading the user-init-file twice in this function, which is a hack because for some reason, just loading the user-init-file once does not work properly.

#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src


* SANE-DEFAULTS
Let's make GNU Emacs look a little better.
#+begin_src emacs-lisp
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
(global-display-line-numbers-mode 1) ;; Display line numbers
(global-visual-line-mode t)  ;; Enable truncated lines
(menu-bar-mode -1)           ;; Disable the menu bar 
(scroll-bar-mode -1)         ;; Disable the scroll bar
(tool-bar-mode -1)           ;; Disable the tool bar
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(setq use-file-dialog nil) ;; No file dialog
(setq use-dialog-box nil) ;; No dialog
(setq use-up-windows nil) ;; No pop-up window
#+end_src


* SMARTPARENS
#+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :hook (prog-mode . smartparens-mode) ;; Enable Smartparens in programming modes
  :config
  (require 'smartparens-config)        ;; Load the default Smartparens configuration
  (show-smartparens-global-mode t))    ;; Enable visual hints for matching pairs
#+end_src

* SHELLS AND TERMINALS
In my configs, all of my shells (bash, fish, zsh and the ESHELL) require my shell-color-scripts-git package to be installed.  On Arch Linux, you can install it from the AUR.  Otherwise, go to my shell-color-scripts repository on GitLab to get it.

** Eshell
Eshell is an Emacs 'shell' that is written in Elisp.

#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.
  
(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

** Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+begin_src emacs-lisp
(use-package vterm
:config
(setq shell-file-name "/usr/bin/bash"
      vterm-max-scrollback 5000))
#+end_src

** Vterm-Toggle 
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.

#+begin_src emacs-lisp
(with-eval-after-load 'vterm-toggle
  (defcustom vterm-toggle-hide-hook nil
    "Hook run when hiding the vterm buffer."
    :type '(repeat function)
    :group 'vterm-toggle))
#+end_src


#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

** Vterm-Multi

Multi-vterm allows you to create and manage multiple vterm buffers, each with its own session.

#+begin_src emacs-lisp
(use-package multi-vterm
  :ensure t
  :elpaca (multi-vterm
           :repo "anler/multi-vterm"
           :files ("*.el" "README.md"))
  :config
  ;; Set dedicated window height (optional)
  (setq multi-vterm-dedicated-window-height-percent 30)
  
  ;; Evil mode integration (since you're using evil)
  (add-hook 'vterm-mode-hook 
            (lambda () 
              (setq-local evil-insert-state-cursor 'box)
              (evil-insert-state)))
  
  ;; Key remappings for vterm mode to work better with evil
  (evil-define-key 'insert vterm-mode-map (kbd "C-e") #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-f") #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-a") #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-v") #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-b") #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-w") #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-u") #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-d") #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-n") #'vterm--self-insert)
  (evil-define-key 'insert vterm-mode-map (kbd "C-m") #'vterm--self-insert))
#+end_src

* SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+begin_src emacs-lisp
(use-package sudo-edit
  :config
    (sam/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src


* TLDR

#+begin_src emacs-lisp
(use-package tldr
 :ensure t)
#+end_src


* THEME
The first of the two lines below designates the directory where will place all of our themes.  The second line loads our chosen theme which is *dtmacs*, a theme that I created with the help of the [[https://emacsfodder.github.io/emacs-theme-editor/][Emacs Theme Editor]].

#+begin_src emacs-lisp
;; Add the themes directory to the custom theme load path
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")

(use-package doom-themes
  :ensure t
  :config
  ;; Enable bold and italic styles
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Load the doom-dracula theme
  (load-theme 'timu-rouge t)

  ;; enable theme for neo-tree as well
  (doom-themes-neotree-config)

  ;; Automatically accept all themes as safe
  (setq custom-safe-themes t))

;; Ensure the selected theme persists across sessions
(customize-set-variable 'custom-enabled-themes '(timu-rouge))
#+end_src



* TRANSPARENCY
With Emacs version 29, true transparency has been added.  

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(alpha-background . 85)) ; For all new frames henceforth
#+end_src

* Verilog Mode Configuration
Configure Verilog mode for Emacs, including indentation settings, compilation, and auto-expansion.

#+BEGIN_SRC emacs-lisp
(use-package verilog-mode
  :ensure t
  :mode ("\\.v\\'" "\\.sv\\'")
  :config
  (setq verilog-auto-newline nil)
  (setq verilog-auto-indent-on-newline t)
  (setq verilog-indent-level 3)
  (setq verilog-indent-level-module 3)
  (setq verilog-indent-level-declaration 3)
  (setq verilog-indent-level-behavioral 3)
  (setq verilog-indent-level-directive 1)
  (setq verilog-case-indent 2)
  (setq verilog-auto-endcomments t)
  (setq verilog-minimum-comment-distance 40)
  (setq verilog-indent-begin-after-if t)
  (setq verilog-auto-lineup 'declarations)
  (setq verilog-linter "my_lint_shell_command")
  (setq verilog-auto-arg-sort t)
  (setq verilog-case-fold nil))

(defun verilog-compile ()
  (interactive)
  (compile (format "iverilog -o %s %s && vvp %s"
                   (file-name-sans-extension (buffer-name))
                   (buffer-name)
                   (file-name-sans-extension (buffer-name)))))

(add-hook 'verilog-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c C-c") 'verilog-compile)))

(add-hook 'verilog-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c C-a") 'verilog-auto)))
#+END_SRC

* Vundo
This package is generally used for looking undo history, and moving around.
#+begin_src emacs-lisp
(use-package vundo
  :commands (vundo)
  :config
  ;; Enable compact display to take less on-screen space
  (setq vundo-compact-display t)

  ;; Customize faces for better contrast
  (custom-set-faces
   '(vundo-node ((t (:foreground "#808080"))))
   '(vundo-stem ((t (:foreground "#808080"))))
   '(vundo-highlight ((t (:foreground "#FFFF00")))))

  ;; Optionally, set other configurations
  ;; (setq vundo-glyph-alist vundo-unicode-symbols)
  ;; (setq vundo-roll-back-on-quit nil)
)
#+end_src


* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-key-order-alpha
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 6
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.25
	which-key-idle-delay 0.8
	which-key-max-description-length 25
	which-key-allow-imprecise-window-fit nil
	which-key-separator " → " ))
#+end_src
